#include "MainManager.h"


MainManager* MainManager::Instance = nullptr;

MainManager::MainManager()
{

}
MainManager::~MainManager()
{

}

void MainManager::CreateInstance()
{
	if (Instance == nullptr)
	{
		Instance = new MainManager();

		LogManager::CreateInstance();
		UserManager::CreateInstance();
		ThreadManager::CreateInstance();
		LoginManager::CreateInstance();
		ErrorManager::CreateInstance();
		EncryptManager::CreateInstance(ENCRYPT_KEY);
	}
}
MainManager* MainManager::GetInstance()
{
	return Instance;
}
void MainManager::DestroyInstance()
{
	if (Instance != nullptr)
	{
		delete Instance;
		Instance = nullptr;

		LogManager::DestroyInstance();
		UserManager::DestroyInstance();
		ThreadManager::DestroyInstance();
		LoginManager::DestroyInstance();
		ErrorManager::DestroyInstance();
		EncryptManager::DestroyInstance();
	}
}
void MainManager::run()
{
	if (Initialize() == false)
	{
		LogManager::GetInstance()->SetTime();
		LogManager::GetInstance()->LogWrite("WSA Initialize failed");
		ErrorManager::GetInstance()->err_quit("WSA Init fail");
	}
	server = new TCPServer();
	if (server->start(SERVERPORT) == false)
	{
		ErrorManager::GetInstance()->err_quit("start() Error");
	}
	server->setBlocking(false);
	
	while (1) 
	{ 
		accept();
	}// Accept()반복

	server->stop();
	delete server;

	// 윈속 종료
	WSACleanup();	// 소켓 DLL 메모리 해제
}

bool MainManager::Initialize()
{
	// 윈속 초기화
	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)	// 소켓 DLL 초기화(DLL을 메모리에 올림). 사용하기에 앞서 "ws2_32"라이브러리를 포함시켜줘야함.( #pragma comment(lib, "ws2_32")  )
		return false;

	return true;
}


bool MainManager::recvProcess(Socket * sock)
{
	User * user = dynamic_cast<User*>(sock);
	if (user == nullptr)
	{
		return true;
	}

	LoginManager* loginManager = LoginManager::GetInstance();
	char buf[BUFSIZE];
	PROTOCOL protocol;
	
	// 수신
	switch (user->getState())
	{
	case LOG_OUT:
		if (user->recvMsg() == false)
		{
			UserManager::GetInstance()->removeUser(user);
			removeSelect(sock);
			return false;
		}
		if (user->isRecvSuccess() == false)
		{
			return true;
		}
		user->unPack(&protocol, &buf);
		switch (protocol)
		{
		case CLIENT_REQ_LOGOUT_MENU:
			loginManager->reqLogoutMenu(user, buf);
			break;
		case CLIENT_LOGOUT_MENU_CHOICE:
			if (loginManager->logoutMenuChoice(user, buf))
			{
				user->stop();
				UserManager::GetInstance()->removeUser(user);
				removeSelect(sock);
				return false;
			}
			break;
		case CLIENT_REQ_ID_OVERLAP_CHECK:
			loginManager->reqIdOverlapCheck(user, buf);
			break;
		case CLIENT_REQ_JOIN:
			loginManager->reqJoin(user, buf);
			break;
		case CLIENT_REQ_LOGIN:
			loginManager->reqLogin(user, buf);
			break;
		}
		break;
	case LOG_IN:
		if (user->recvMsg() == false)
		{
			UserManager::GetInstance()->removeUser(user);
			removeSelect(sock);
			return false;
		}
		if (user->isRecvSuccess() == false)
		{
			return true;
		}
		user->unPack(&protocol, &buf);
		switch (protocol)
		{
		case CLIENT_REQ_LOGIN_MENU:
			loginManager->reqLoginMenu(user, buf);
			break;
		case CLIENT_LOGIN_MENU_CHOICE:
			if (loginManager->loginMenuChoice(user, buf))
			{
				user->stop();
				UserManager::GetInstance()->removeUser(user);
				removeSelect(sock);
				return false;
			}
			break;
		}
		break;
	}

	return true;
}
bool MainManager::sendProcess(Socket * sock)
{
	User * user = dynamic_cast<User*>(sock);
	if (user == nullptr)
	{
		return true;
	}
	
	if (user->sendMsg() == false)
	{
		UserManager::GetInstance()->removeUser(user);
		removeSelect(sock);
		return false;
	}

	if (user->isSendSuccess() == true)
	{
		user->include_wset = false;
	}

	return true;
}

void MainManager::accept()
{
	SOCKET sock = server->acceptClient();
	User* user = UserManager::GetInstance()->addUser(sock);
	addSelect(user);
	LoginManager::GetInstance()->sendIntro(user);
}

void MainManager::set(SelectGroup* group, FD_SET *read, FD_SET *write)
{
	for (int i = 0; i < group->count; i++)
	{
		if (group->sock[i]->include_rset)
		{
			FD_SET(group->sock[i]->getSocket(), read);
		}
		if (group->sock[i]->include_wset)
		{
			FD_SET(group->sock[i]->getSocket(), write);
		}
	}
}

void MainManager::addSelect(Socket* sock)
{
	bool add = false; //소켓 추가 여부
	int count = ThreadManager::GetInstance()->getCount();

	// 변경 예정
	for (int i = 0; i < count; i++)
	{
		SelectGroup* group = (SelectGroup*)ThreadManager::GetInstance()->getData(i);
		if (group->count < FD_SETSIZE)
		{
			group->sock[group->count++] = sock;
			add = true;
			break;
		}
	}

	if (!add) //끝까지 조회했는데 아직 추가 못했을때
	{
		SelectGroup* group = new SelectGroup(); //새로운 그룹 생성
		group->sock[0] = sock;
		group->count = 1;
		group->thread = ThreadManager::GetInstance()->addThread(group, this);
	}
}

void MainManager::removeSelect(Socket* sock)
{
	int count = ThreadManager::GetInstance()->getCount();

	for (int i = 0; i < count; i++)
	{
		SelectGroup* group = (SelectGroup*)ThreadManager::GetInstance()->getData(i);

		for (int j = 0; j < group->count; j++)
		{
			if (group->sock[j] != sock)
			{
				continue;
			}

			for (int k = j; k < group->count - 1; k++)
			{
				group->sock[k] = group->sock[k + 1];
			}
			group->sock[group->count - 1] = nullptr;
			group->count--;
			return;
		}
	}
}